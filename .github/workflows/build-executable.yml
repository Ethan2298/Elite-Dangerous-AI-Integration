name: Build and Test Executable

on: [push, pull_request]

jobs:
  pyinstaller-build:
    name: Build Executable
    runs-on: windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install --force-reinstall -r requirements.txt
          python -m pip install --force-reinstall numpy==2.2.2 opencv-python==4.10.0.84

      - name: Run tests
        run: |
          python -m pytest --timeout 10 test -v

      - name: Install pyinstaller
        run: |
          $Env:CL = "/Od"
          $Env:PYINSTALLER_COMPILE_BOOTLOADER = "true"
          python -m pip install --force-reinstall --ignore-installed --no-binary :all: --no-cache pyinstaller@git+https://github.com/pyinstaller/pyinstaller.git@0d562b5
          $Env:CL = ""

      - name: Determine paths for dependencies
        id: determine_paths
        run: |
          $VAD_MODEL = python -c 'import os, pysilero_vad; print(os.path.join(os.path.dirname(pysilero_vad.__file__), "models", "silero_vad.onnx"))'
          $VEC_EXTENSION = python -c 'import os, sqlite_vec; print(os.path.join(os.path.dirname(sqlite_vec.__file__), "vec0.dll"))'
          echo "VAD_MODEL=$VAD_MODEL" >> $env:GITHUB_ENV
          echo "VEC_EXTENSION=$VEC_EXTENSION" >> $env:GITHUB_ENV

      - name: Create Executable for AIGUI
        run: |
          pyinstaller .\src\AIGUI.py -y --onedir --clean --noconsole --add-data .\docs\screen\EDAI_logo.png:.\screen

      - name: Create Executable for Chat
        run: |
          pyinstaller .\src\Chat.py -y --onedir --clean --console --hidden-import=comtypes.stream `
            --add-data .\src:. `
            --add-binary ${{ env.VAD_MODEL }}:.\pysilero_vad\models `
            --add-binary ${{ env.VEC_EXTENSION }}:.\sqlite_vec

      - name: Get current commit ID
        id: get_commit
        run: |
          $COMMIT_ID = git rev-parse HEAD
          echo "COMMIT_ID=$COMMIT_ID" >> $env:GITHUB_ENV

      - name: Create start.bat script
        run: |
          $commitId = "${{ github.sha }}"
          $start = "@echo off`r`nstart """" .\\AIGUI\\AIGUI.exe --chat=Chat\\Chat.exe --release=$commitId`r`nexit"
          $start | Out-File -Encoding ASCII .\\dist\\start.bat

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: COVAS_NEXT_v${{ github.sha }}
          path: ./dist
        # output the upload URL for later use
        id: upload-artifact

  tauri-build:
    name: Build Tauri App
    needs: pyinstaller-build
    runs-on: windows-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: COVAS_NEXT_v${{ github.sha }}
          path: dist

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: ui/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        working-directory: ui
        run: npm install

      - name: Set Tauri version
        working-directory: ui
        run: |
          $SHORT_HASH = "${{ github.sha }}".Substring(0, 7)
          npx tauri-version "0.0.0-$SHORT_HASH"
          echo "Using version: 0.0.0-$SHORT_HASH"

      - name: Build tauri app
        working-directory: ui
        run: npm run tauri build
        env:
          COMMIT_HASH: ${{ github.sha }}

      - name: Create simple zip with only required files
        run: |
          $SHORT_HASH = "${{ github.sha }}".Substring(0, 7)
          # Create a temporary directory for the files
          New-Item -ItemType Directory -Path .\simple-zip -Force
          # Copy only the executable and resources folder
          Copy-Item -Path .\ui\src-tauri\target\release\covas-next-ui.exe -Destination .\simple-zip\
          Copy-Item -Path .\ui\src-tauri\target\release\resources -Destination .\simple-zip\ -Recurse

      - name: Upload simple zip file
        uses: actions/upload-artifact@v4
        with:
          name: COVAS_NEXT_TAURI_v${{ github.sha }}
          path: .\simple-zip

  e2e-and-scan:
    name: E2E Tests & Defender Scan
    # This is required to run in a fresh VM to check if all python deps are bundled in the exe
    # and to ensure Windows Defender considers the executable as downloaded from the internet
    runs-on: windows-latest
    needs: pyinstaller-build
    steps:
      - name: Prepare Windows Defender
        # https://github.com/actions/runner-images/issues/855#issuecomment-626692949 may help to understand
        run: |
          & "C:\Program Files\Windows Defender\MpCmdRun.exe" -ListAllDynamicSignatures

          # https://github.com/actions/runner-images/blob/61df9288f9be9f6aeaaaa4ad52a7332432913fc3/images/windows/scripts/build/Configure-WindowsDefender.ps1#L38-L44
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Advanced Threat Protection' -Name 'ForceDefenderPassiveMode' -Value '0' -Type 'DWORD'
          Start-Service -DisplayName *Defend* -WhatIf
          Start-Service -Name WinDefend

          # Get-Item -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender"
          # Get-Item -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet"
          # I can't find any resource of this key in web also GitHub, but Copilot said... So testing in action runner may be interest :)
          # Set-ItemProperty -Force -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" -Name JoinMicrosoftSpyNet -Value 1
          # Get-Item -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet"

          # Remove cache: https://news.mynavi.jp/article/win10tips-410/
          # & "C:\Program Files\Windows Defender\MpCmdRun.exe" -RemoveDefinitions -DynamicSignatures

          # Enable cloud-based protection
          Set-MpPreference -MAPSReporting Advanced
          # Enable automatic sample submission
          Set-MpPreference -SubmitSamplesConsent SendSafeSamples
          # Enable behavior monitoring
          Set-MpPreference -DisableBehaviorMonitoring $false
          # Restart-Service -Name WinDefend

          Set-Service -Name wuauserv -StartupType Manual -Status Running
          & "C:\Program Files\Windows Defender\MpCmdRun.exe" -SignatureUpdate
          Update-MpSignature
          # Restart-Service -Name WinDefend
          & "C:\Program Files\Windows Defender\MpCmdRun.exe" -ListAllDynamicSignatures

          # Remove all exclusions
          Remove-MpPreference -ExclusionPath (Get-MpPreference).ExclusionPath

      - name: Make sure dynamic signatures are enabled ... or not
        run: |
          Get-MpComputerStatus

          # Remove this to raise error if you REALIZED to enable Dynamic Signature scans
          # if (!((& "C:\Program Files\Windows Defender\MpCmdRun.exe" -ListAllDynamicSignatures) | Select-String -Pattern "SignatureSet ID:")) {
          #   Exit 42
          # }
          & "C:\Program Files\Windows Defender\MpCmdRun.exe" -ListAllDynamicSignatures

      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: COVAS_NEXT_v${{ github.sha }}
          path: dist

      - name: List contents (debug)
        run: dir dist\AIGUI

      - name: Run Windows Defender
        run: |
          & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -Trace -File "$(pwd)\dist"
          # & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -Trace -File "$(pwd)\dist\AIGUI\AIGUI.exe"
          # & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -Trace -File "$(pwd)\dist\Chat\Chat.exe"

          # Do not enable this as possible, too slow ... Scanning all folders with this option? :<
          # Start-MpScan -ScanPath "$pwd\dist"

          Get-MpThreat
          Get-MpThreatDetection

      - name: Output scan results
        run: |
          Get-MpThreatDetection
          $count = (Get-MpThreatDetection).Count

          exit $count

      - name: Run e2e tests
        run: |
          python --version
          python e2e/test_ChatExecutable.py
