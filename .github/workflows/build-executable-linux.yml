name: Build and Test Executable on linux

on: [push, pull_request]

jobs:
  pyinstaller-build:
    name: Build Executable
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          sudo apt-get install portaudio19-dev
          python -m pip install --upgrade pip setuptools
          python -m pip install --force-reinstall -r requirements.txt
          python -m pip install --force-reinstall numpy==2.2.2 opencv-python==4.10.0.84

      - name: Run tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            python -m pytest --timeout 10 test -v

      - name: Install pyinstaller
        run: |
          python -m pip install pyinstaller@git+https://github.com/pyinstaller/pyinstaller.git@0d562b5

      - name: Determine paths for dependencies
        id: determine_paths
        run: |
          export VAD_MODEL=$(python3 -c 'import os, pysilero_vad; print(os.path.join(os.path.dirname(pysilero_vad.__file__), "models", "silero_vad.onnx"))')
          export VEC_EXTENSION=$(python3 -c 'import os, sqlite_vec; print(os.path.join(os.path.dirname(sqlite_vec.__file__), "vec0.so"))')
          echo "VAD_MODEL=$VAD_MODEL" >> $GITHUB_ENV
          echo "VEC_EXTENSION=$VEC_EXTENSION" >> $GITHUB_ENV

      - name: Create Executable for AIGUI
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            pyinstaller ./src/AIGUI.py -y --onedir --clean --noconsole --add-data ./docs/screen/EDAI_logo.png:./screen

      - name: Create Executable for Chat
        uses: GabrielBB/xvfb-action@v1
        with:
          run: >-
            pyinstaller ./src/Chat.py -y --onedir --clean --console --add-data ./src:. --add-binary ${{ env.VAD_MODEL }}:./pysilero_vad/models --add-binary ${{ env.VEC_EXTENSION }}:./sqlite_vec

      - name: Create start.sh script
        run: |
          echo "#!/bin/bash" > ./dist/start.sh
          echo 'cd "$(dirname "$0")"' >> ./dist/start.sh
          echo "./AIGUI/AIGUI --chat=./Chat/Chat" >> ./dist/start.sh
          chmod +x ./dist/start.sh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: COVAS_NEXT_v${{ github.sha }}_linux
          path: ./dist
        # output the upload URL for later use
        id: upload-artifact

  tauri-build:
    name: Build Tauri App
    needs: pyinstaller-build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: COVAS_NEXT_v${{ github.sha }}_linux
          path: dist

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: ui/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install system libraries
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        working-directory: ui
        run: npm install

      - name: Set Tauri version
        working-directory: ui
        run: |
          SHORT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          npx tauri-version "0.0.0-$SHORT_HASH"
          echo "Using version: 0.0.0-$SHORT_HASH"

      - name: Build tauri app
        working-directory: ui
        run: npm run tauri build
        env:
          COMMIT_HASH: ${{ github.sha }}

      - name: Create proper directory structure for zip
        run: |
          mkdir -p dist-zip/bin
          mkdir -p dist-zip/lib/covas-next-ui
          # Copy the executable to bin directory
          cp ui/src-tauri/target/release/covas-next-ui dist-zip/bin/
          # Copy resources to lib directory
          cp -r ui/src-tauri/target/release/resources dist-zip/lib/covas-next-ui/
          # Make the executable executable
          chmod +x dist-zip/bin/covas-next-ui
          chmod +x dist-zip/lib/covas-next-ui/resources/Chat

      - name: Create tar file
        run: |
          SHORT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          cd dist-zip
          tar -czvf ../covas-next-ui-linux-$SHORT_HASH.tar.gz ./*
          cd ..

      - name: Upload tauri app zip file
        uses: actions/upload-artifact@v4
        with:
          name: COVAS_NEXT_TAURI_v${{ github.sha }}_linux
          path: covas-next-ui-linux-*.tar.gz

  e2e-and-scan:
    name: E2E Tests & Defender Scan
    runs-on: ubuntu-latest
    needs: pyinstaller-build
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: COVAS_NEXT_v${{ github.sha }}_linux
          path: dist

      - name: Run e2e tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            python --version
            chmod +x ./dist/start.sh
            chmod +x ./dist/Chat/Chat
            chmod +x ./dist/AIGUI/AIGUI
            python e2e/test_ChatExecutable.py
